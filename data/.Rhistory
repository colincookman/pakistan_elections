win_rate = seats_won/candidates_fielded,
# share of the party's total fielded candidates who won their races
mean_vote_share = mean(candidate_share, na.rm = TRUE),
# average share of the constituency vote total received by all of the party's contesting candidates
med_vote_share = median(candidate_share, na.rm = TRUE),
# midpoint share of the constituency vote total received by all of the party's contesting candidates
mean_win_share = mean(candidate_share[candidate_rank == 1], na.rm = TRUE),
# average share of the constituency vote total received by the party's winning candidates
med_win_share = median(candidate_share[candidate_rank == 1], n.rm = TRUE)
# midpoint share of the constituency vote total received the party's winning candidates
)
temp <- candidate_data %>%
filter(contest_status == "Contested") %>%
group_by(assembly, election_date, province) %>%
summarize(
all_votes = sum(candidate_votes, na.rm = TRUE),
all_seats = sum(candidate_rank == 1, na.rm = TRUE)
)
Party_Summary <- left_join(Party_Summary, temp)
Party_Summary <- Party_Summary %>%
group_by(election_date, assembly, province) %>%
mutate(
party_vote_share = party_votes/all_votes,
# total number of votes received by the party as a share of all votes cast in province + assembly
seats_won_share = seats_won/all_seats,
# share of assembly seats won by party in province
seats_contested_share = candidates_fielded/all_seats,
# share of assembly seats contested by party in province
votes_seats_diff = party_vote_share - seats_won_share
# difference between share of votes won by party and share of seats won by party
)
temp <- constituency_data %>%
filter(contest_status == "Contested") %>%
group_by(election_date, assembly, win_party, province) %>%
summarize(
mean_win_MOV_pct = mean(MOV_pct, na.rm = TRUE),
# average margin of victory achieved by the party's winning candidates in province + assembly
med_win_MOV_pct = median(MOV_pct, na.rm = TRUE)
# midpoint margin of victory achieved by the party's winning candidates in province + assembly
)
names(temp)[names(temp) == "win_party"] <- "candidate_party"
Party_Summary <- left_join(Party_Summary, temp,
by = c("election_date", "assembly", "candidate_party", "province"))
Party_Summary <- dplyr::select(Party_Summary, election_date, assembly, province, all_votes, all_seats,
candidate_party,
candidates_fielded, seats_contested_share,
seats_won, seats_second, seats_third,
win_rate, seats_won_share,
mean_win_share, med_win_share, mean_win_MOV_pct, med_win_MOV_pct,
party_votes, mean_vote_count, med_vote_count,
party_vote_share, mean_vote_share, med_vote_share
)
Party_Summary <- arrange(Party_Summary, election_date, candidate_party, province)
View(Party_Summary)
assembly_select <- "Provincial" # assembly to target for summary output
prov_select <- "Punjab" # province to target for summary output
date_select <- "2013-05-11" # election date to target for summary output
Output <- Party_Summary %>% filter(assembly == assembly_select & election_date == date_select & province == prov_select)
Output <- arrange(Output, seats_won_share, candidates_fielded)
Output <- dplyr::select(Output, all_votes, all_seats, candidate_party, candidates_fielded,
seats_contested_share, seats_won, seats_won_share, win_rate, seats_second,
mean_win_MOV_pct, mean_vote_share, party_votes, party_vote_share)
threshold <- mean(Output$seats_contested_share, 0.5)
Output <- Output %>% filter(seats_contested_share >= threshold)
Output <- (Output[, c(6:16)]) # trim columns
Output <- arrange(Output, desc(seats_won_share), party_vote_share)
View(Output)
View(Output)
Output <- Party_Summary %>% filter(assembly == assembly_select & election_date == date_select & province == prov_select)
ggplot(data = Party_Summary, aes(x = seats_contested_share, y = mean_vote_share, color = province)) + geom_point()
library("tidyverse", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
ggplot(data = Party_Summary, aes(x = seats_contested_share, y = mean_vote_share, color = province)) + geom_point()
ggplot(data = subset(Party_Summary, election_date == "2013-05-11"), aes(x = seats_contested_share, y = mean_vote_share, color = province)) + geom_point()
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National"), aes(x = seats_contested_share, y = mean_vote_share, color = province)) + geom_point()
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"), aes(x = seats_contested_share, y = mean_vote_share, color = candidate_party)) + geom_point()
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"), aes(y = log(seats_contested_share), x = log(mean_vote_share))) + geom_point()
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
library("ggrepel", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab" &
quantile(log(seats_contested_share), .75)),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab" &
quantile(log(seats_contested_share), .25)),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab" &
quantile(log(mean_vote_share), .25)),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab" &
quantile(log(mean_vote_share), .25, na.rm = TRUE)),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab" &
log(mean_vote_share) > (quantile(log(mean_vote_share), .25, na.rm = TRUE))
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab" &
log(mean_vote_share) > (quantile(log(mean_vote_share), .75, na.rm = TRUE))
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .75, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .75, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" & province == "Punjab" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .55, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .55, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .55, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .55, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
Party_Summary <- candidate_data %>%
filter(contest_status == "Contested") %>%
group_by(assembly, election_date, contest_status, candidate_party) %>%
summarize(
party_votes = sum(candidate_votes, na.rm = TRUE),
# total votes received by the party in all constituencies in a province
mean_vote_count = mean(candidate_votes, na.rm = TRUE),
# average number of votes received by the party per constituency contested
med_vote_count = median(candidate_votes, na.rm = TRUE),
# midpoint number of votes received by the party of all constituencies contested
candidates_fielded = n(),
# number of candidates fielded by party
seats_won = sum(candidate_rank == 1),
# count the number of constituencies in which the party's candidate received the max vote
seats_second = sum(candidate_rank == 2),
# count the number of constituencies in which the party's candidate received the second most votes
seats_third = sum(candidate_rank == 3),
# count the number of constituencies in which the party's candidate received the third most votes
win_rate = seats_won/candidates_fielded,
# share of the party's total fielded candidates who won their races
mean_vote_share = mean(candidate_share, na.rm = TRUE),
# average share of the constituency vote total received by all of the party's contesting candidates
med_vote_share = median(candidate_share, na.rm = TRUE),
# midpoint share of the constituency vote total received by all of the party's contesting candidates
mean_win_share = mean(candidate_share[candidate_rank == 1], na.rm = TRUE),
# average share of the constituency vote total received by the party's winning candidates
med_win_share = median(candidate_share[candidate_rank == 1], n.rm = TRUE)
# midpoint share of the constituency vote total received the party's winning candidates
)
#
# find all contested seats and call votes cast within a given assembly and province
temp <- candidate_data %>%
filter(contest_status == "Contested") %>%
group_by(assembly, election_date) %>%
summarize(
all_votes = sum(candidate_votes, na.rm = TRUE),
all_seats = sum(candidate_rank == 1, na.rm = TRUE)
)
Party_Summary <- left_join(Party_Summary, temp)
Party_Summary <- Party_Summary %>%
group_by(election_date, assembly) %>%
mutate(
party_vote_share = party_votes/all_votes,
# total number of votes received by the party as a share of all votes cast in province + assembly
seats_won_share = seats_won/all_seats,
# share of assembly seats won by party in province
seats_contested_share = candidates_fielded/all_seats,
# share of assembly seats contested by party in province
votes_seats_diff = party_vote_share - seats_won_share
# difference between share of votes won by party and share of seats won by party
)
#
temp <- constituency_data %>%
filter(contest_status == "Contested") %>%
group_by(election_date, assembly, win_party) %>%
summarize(
mean_win_MOV_pct = mean(MOV_pct, na.rm = TRUE),
# average margin of victory achieved by the party's winning candidates in province + assembly
med_win_MOV_pct = median(MOV_pct, na.rm = TRUE)
# midpoint margin of victory achieved by the party's winning candidates in province + assembly
)
names(temp)[names(temp) == "win_party"] <- "candidate_party"
Party_Summary <- left_join(Party_Summary, temp,
by = c("election_date", "assembly", "candidate_party"))
#
# Summarize and Reorder Tables
Party_Summary <- dplyr::select(Party_Summary, election_date, assembly, province, all_votes, all_seats,
candidate_party,
candidates_fielded, seats_contested_share,
seats_won, seats_second, seats_third,
win_rate, seats_won_share,
mean_win_share, med_win_share, mean_win_MOV_pct, med_win_MOV_pct,
party_votes, mean_vote_count, med_vote_count,
party_vote_share, mean_vote_share, med_vote_share
)
Party_Summary <- arrange(Party_Summary, election_date, candidate_party)
Party_Summary <- candidate_data %>%
filter(contest_status == "Contested") %>%
group_by(assembly, election_date, contest_status, candidate_party) %>%
summarize(
party_votes = sum(candidate_votes, na.rm = TRUE),
# total votes received by the party in all constituencies in a province
mean_vote_count = mean(candidate_votes, na.rm = TRUE),
# average number of votes received by the party per constituency contested
med_vote_count = median(candidate_votes, na.rm = TRUE),
# midpoint number of votes received by the party of all constituencies contested
candidates_fielded = n(),
# number of candidates fielded by party
seats_won = sum(candidate_rank == 1),
# count the number of constituencies in which the party's candidate received the max vote
seats_second = sum(candidate_rank == 2),
# count the number of constituencies in which the party's candidate received the second most votes
seats_third = sum(candidate_rank == 3),
# count the number of constituencies in which the party's candidate received the third most votes
win_rate = seats_won/candidates_fielded,
# share of the party's total fielded candidates who won their races
mean_vote_share = mean(candidate_share, na.rm = TRUE),
# average share of the constituency vote total received by all of the party's contesting candidates
med_vote_share = median(candidate_share, na.rm = TRUE),
# midpoint share of the constituency vote total received by all of the party's contesting candidates
mean_win_share = mean(candidate_share[candidate_rank == 1], na.rm = TRUE),
# average share of the constituency vote total received by the party's winning candidates
med_win_share = median(candidate_share[candidate_rank == 1], n.rm = TRUE)
# midpoint share of the constituency vote total received the party's winning candidates
)
#
# find all contested seats and call votes cast within a given assembly and province
temp <- candidate_data %>%
filter(contest_status == "Contested") %>%
group_by(assembly, election_date) %>%
summarize(
all_votes = sum(candidate_votes, na.rm = TRUE),
all_seats = sum(candidate_rank == 1, na.rm = TRUE)
)
Party_Summary <- left_join(Party_Summary, temp)
Party_Summary <- Party_Summary %>%
group_by(election_date, assembly) %>%
mutate(
party_vote_share = party_votes/all_votes,
# total number of votes received by the party as a share of all votes cast in province + assembly
seats_won_share = seats_won/all_seats,
# share of assembly seats won by party in province
seats_contested_share = candidates_fielded/all_seats,
# share of assembly seats contested by party in province
votes_seats_diff = party_vote_share - seats_won_share
# difference between share of votes won by party and share of seats won by party
)
#
temp <- constituency_data %>%
filter(contest_status == "Contested") %>%
group_by(election_date, assembly, win_party) %>%
summarize(
mean_win_MOV_pct = mean(MOV_pct, na.rm = TRUE),
# average margin of victory achieved by the party's winning candidates in province + assembly
med_win_MOV_pct = median(MOV_pct, na.rm = TRUE)
# midpoint margin of victory achieved by the party's winning candidates in province + assembly
)
names(temp)[names(temp) == "win_party"] <- "candidate_party"
Party_Summary <- left_join(Party_Summary, temp,
by = c("election_date", "assembly", "candidate_party"))
#
# Summarize and Reorder Tables
Party_Summary <- dplyr::select(Party_Summary, election_date, assembly, all_votes, all_seats,
candidate_party,
candidates_fielded, seats_contested_share,
seats_won, seats_second, seats_third,
win_rate, seats_won_share,
mean_win_share, med_win_share, mean_win_MOV_pct, med_win_MOV_pct,
party_votes, mean_vote_count, med_vote_count,
party_vote_share, mean_vote_share, med_vote_share
)
Party_Summary <- arrange(Party_Summary, election_date, candidate_party)
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .55, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .55, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(0.55, "lines"))
ggplot(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, election_date == "2013-05-11" & assembly == "National" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .65, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(1, "lines"))
ggplot(data = subset(Party_Summary, assembly == "National"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
facet_wrap(~ election_date) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, assembly == "National" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .65, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(1, "lines"))
View(Party_Summary)
View(Party_Summary)
View(candidate_data)
Party_Summary <- candidate_data %>%
filter(contest_status == "Contested") %>%
group_by(assembly, election_date, election_type, contest_status, candidate_party) %>%
summarize(
party_votes = sum(candidate_votes, na.rm = TRUE),
# total votes received by the party in all constituencies in a province
mean_vote_count = mean(candidate_votes, na.rm = TRUE),
# average number of votes received by the party per constituency contested
med_vote_count = median(candidate_votes, na.rm = TRUE),
# midpoint number of votes received by the party of all constituencies contested
candidates_fielded = n(),
# number of candidates fielded by party
seats_won = sum(candidate_rank == 1),
# count the number of constituencies in which the party's candidate received the max vote
seats_second = sum(candidate_rank == 2),
# count the number of constituencies in which the party's candidate received the second most votes
seats_third = sum(candidate_rank == 3),
# count the number of constituencies in which the party's candidate received the third most votes
win_rate = seats_won/candidates_fielded,
# share of the party's total fielded candidates who won their races
mean_vote_share = mean(candidate_share, na.rm = TRUE),
# average share of the constituency vote total received by all of the party's contesting candidates
med_vote_share = median(candidate_share, na.rm = TRUE),
# midpoint share of the constituency vote total received by all of the party's contesting candidates
mean_win_share = mean(candidate_share[candidate_rank == 1], na.rm = TRUE),
# average share of the constituency vote total received by the party's winning candidates
med_win_share = median(candidate_share[candidate_rank == 1], n.rm = TRUE)
# midpoint share of the constituency vote total received the party's winning candidates
)
#
# find all contested seats and call votes cast within a given assembly and province
temp <- candidate_data %>%
filter(contest_status == "Contested") %>%
group_by(assembly, election_date) %>%
summarize(
all_votes = sum(candidate_votes, na.rm = TRUE),
all_seats = sum(candidate_rank == 1, na.rm = TRUE)
)
Party_Summary <- left_join(Party_Summary, temp)
Party_Summary <- Party_Summary %>%
group_by(election_date, assembly) %>%
mutate(
party_vote_share = party_votes/all_votes,
# total number of votes received by the party as a share of all votes cast in province + assembly
seats_won_share = seats_won/all_seats,
# share of assembly seats won by party in province
seats_contested_share = candidates_fielded/all_seats,
# share of assembly seats contested by party in province
votes_seats_diff = party_vote_share - seats_won_share
# difference between share of votes won by party and share of seats won by party
)
#
temp <- constituency_data %>%
filter(contest_status == "Contested") %>%
group_by(election_date, assembly, win_party) %>%
summarize(
mean_win_MOV_pct = mean(MOV_pct, na.rm = TRUE),
# average margin of victory achieved by the party's winning candidates in province + assembly
med_win_MOV_pct = median(MOV_pct, na.rm = TRUE)
# midpoint margin of victory achieved by the party's winning candidates in province + assembly
)
names(temp)[names(temp) == "win_party"] <- "candidate_party"
Party_Summary <- left_join(Party_Summary, temp,
by = c("election_date", "assembly", "candidate_party"))
#
# Summarize and Reorder Tables
Party_Summary <- dplyr::select(Party_Summary, election_date, election_type, assembly, all_votes, all_seats,
candidate_party,
candidates_fielded, seats_contested_share,
seats_won, seats_second, seats_third,
win_rate, seats_won_share,
mean_win_share, med_win_share, mean_win_MOV_pct, med_win_MOV_pct,
party_votes, mean_vote_count, med_vote_count,
party_vote_share, mean_vote_share, med_vote_share
)
Party_Summary <- arrange(Party_Summary, election_date, candidate_party)
# Filtered output table
# assembly_select <- "Provincial" # assembly to target for summary output
# prov_select <- "Punjab" # province to target for summary output
# date_select <- "2013-05-11" # election date to target for summary output
# Output <- Party_Summary %>% filter(assembly == assembly_select & election_date == date_select & province == prov_select)
# Output <- arrange(Output, seats_won_share, candidates_fielded)
# Output <- dplyr::select(Output, all_votes, all_seats, candidate_party, candidates_fielded,
#                                    seats_contested_share, seats_won, seats_won_share, win_rate, seats_second,
#                                    mean_win_MOV_pct, mean_vote_share, party_votes, party_vote_share)
# for brevit of output, exclude parties who did not contest more than the avg share of contested seats
# threshold <- mean(Output$seats_contested_share, 0.5)
# Output <- Output %>% filter(seats_contested_share >= threshold)
# Output <- (Output[, c(6:16)]) # trim columns
# Output <- arrange(Output, desc(seats_won_share), party_vote_share)
ggplot(data = subset(Party_Summary, assembly == "National" & election_type == "General"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
facet_wrap(~ election_date) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, assembly == "National" & election_type == "General" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .65, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(1, "lines"))
View(Party_Summary)
ggplot(data = subset(Party_Summary, assembly == "National" & election_type == "General Election"),
aes(y = log(seats_contested_share), x = log(mean_vote_share))) +
facet_wrap(~ as.factor(election_date)) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, assembly == "National" & election_type == "General Election" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .65, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(1, "lines"))
ggplot(data = subset(Party_Summary, assembly == "National" & election_type == "General Election"),
aes(y = log(seats_contested_share), x = log(mean_vote_share), size = candidates_fielded
)) +
facet_wrap(~ as.factor(election_date)) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, assembly == "National" & election_type == "General Election" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .65, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(1, "lines"))
ggplot(data = subset(Party_Summary, assembly == "National" & election_type == "General Election"),
aes(y = log(seats_contested_share), x = log(mean_vote_share), size = seats_won
)) +
facet_wrap(~ as.factor(election_date)) +
geom_point() +
geom_text_repel(data = subset(Party_Summary, assembly == "National" & election_type == "General Election" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .65, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(1, "lines"))
ggplot(data = subset(Party_Summary, assembly == "National" & election_type == "General Election"),
aes(y = log(seats_contested_share), x = log(mean_vote_share), size = seats_won
)) +
facet_wrap(~ as.factor(election_date)) +
geom_point(alpha = .7) +
geom_text_repel(data = subset(Party_Summary, assembly == "National" & election_type == "General Election" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .65, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 3, box.padding = unit(1, "lines"))
ggplot(data = subset(Party_Summary, assembly == "National" & election_type == "General Election"),
aes(y = log(seats_contested_share), x = log(mean_vote_share), size = seats_won
)) +
facet_wrap(~ as.factor(election_date)) +
geom_point(alpha = .7) +
geom_text_repel(data = subset(Party_Summary, assembly == "National" & election_type == "General Election" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .65, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 1, box.padding = unit(1, "lines"))
ggplot(data = subset(Party_Summary, assembly == "National" & election_type == "General Election"),
aes(y = log(seats_contested_share), x = log(mean_vote_share), size = seats_won
)) +
facet_wrap(~ as.factor(election_date)) +
geom_point(alpha = .7) +
geom_text_repel(data = subset(Party_Summary, assembly == "National" & election_type == "General Election" &
(log(mean_vote_share) >= (quantile(log(mean_vote_share), .65, na.rm = TRUE)) |
log(seats_contested_share) >= (quantile(log(seats_contested_share), .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 2, box.padding = unit(.5, "lines"))
ggplot(data = subset(Party_Summary, assembly == "National" & election_type == "General Election"),
aes(y = seats_contested_share, x = mean_vote_share, size = seats_won
)) +
facet_wrap(~ as.factor(election_date)) +
geom_point(alpha = .7) +
geom_text_repel(data = subset(Party_Summary, assembly == "National" & election_type == "General Election" &
(mean_vote_share >= (quantile(mean_vote_share, .65, na.rm = TRUE))) |
(seats_contested_share >= (quantile(seats_contested_share, .65, na.rm = TRUE))
)
),
mapping = aes(label = candidate_party), size = 2, box.padding = unit(.5, "lines"))
