group_by(assembly, election_date) %>%
summarize(
all_votes = sum(candidate_votes, na.rm = TRUE),
all_seats = sum(candidate_rank == 1, na.rm = TRUE)
)
Party_Summary <- left_join(Party_Summary, temp)
Party_Summary <- Party_Summary %>%
group_by(election_date, assembly) %>%
mutate(
party_vote_share = party_votes/all_votes,
# total number of votes received by the party as a share of all votes cast in province + assembly
seats_won_share = seats_won/all_seats,
# share of assembly seats won by party in province
seats_contested_share = candidates_fielded/all_seats,
# share of assembly seats contested by party in province
votes_seats_diff = party_vote_share - seats_won_share
# difference between share of votes won by party and share of seats won by party
)
#
temp <- constituency_data %>%
filter(contest_status == "Contested") %>%
group_by(election_date, assembly, win_party) %>%
summarize(
mean_win_MOV_pct = mean(MOV_pct, na.rm = TRUE),
# average margin of victory achieved by the party's winning candidates in province + assembly
med_win_MOV_pct = median(MOV_pct, na.rm = TRUE)
# midpoint margin of victory achieved by the party's winning candidates in province + assembly
)
names(temp)[names(temp) == "win_party"] <- "candidate_party"
Party_Summary <- left_join(Party_Summary, temp,
by = c("election_date", "assembly", "candidate_party"))
#
# Summarize and Reorder Tables
Party_Summary <- dplyr::select(Party_Summary, election_date, assembly, all_votes, all_seats,
candidate_party,
candidates_fielded, seats_contested_share,
seats_won, seats_second, seats_third,
win_rate, seats_won_share,
mean_win_share, med_win_share, mean_win_MOV_pct, med_win_MOV_pct,
party_votes, mean_vote_count, med_vote_count,
party_vote_share, mean_vote_share, med_vote_share
)
Party_Summary <- arrange(Party_Summary, election_date, candidate_party, province)
# Filtered output table
assembly_select <- "National" # assembly to target for summary output
prov_select <- "Khyber Paktunkhwa (NWFP)" # province to target for summary output
date_select <- "2013-05-11" # election date to target for summary output
Output <- Party_Summary %>% filter(assembly == assembly_select & election_date == date_select)# & province == prov_select)
Output <- arrange(Output, seats_won_share, candidates_fielded)
Output <- dplyr::select(Output, all_votes, all_seats, candidate_party, candidates_fielded,
seats_contested_share, seats_won, seats_won_share, win_rate, seats_second,
mean_win_MOV_pct, mean_vote_share, party_votes, party_vote_share)
# for brevit of output, exclude smallest parties
Output <- Output %>% filter(seats_won > 0)
View(Output)
Output <- (Output[, c(5:15)]) # trim columns
Output <- arrange(Output, desc(seats_won_share), party_vote_share)
# rename variables for print
names(Output) <- c("Party Name", "# of Candidates Fielded", "Pct of Assembly Direct Seats Contested", "# of Seats Won",
"Pct of Assembly Direct Seats Won", "Pct of Contesting Candidates Who Won", "# of Runner-Up Candidates",
"Mean MOV for Winners", "Mean Share of Vote Received by Candidates",
"Total Votes Received by Party", "Party Votes as Pct of All Votes Cast")
write.csv(Output,"NA_Summary.csv")
party_positions <- read.csv("end_of_term_party_positions.csv")
setwd("~/Google Drive/GitHub/pakistan_elections/data")
party_positions <- read.csv("end_of_term_party_positions.csv")
View(party_positions)
assembly_control <- party_postions %>%
group_by(assembly, bench) %>%
summarize(
party_direct_label = paste0(party_name, "Direct Seats"),
party_reserved_label = paste0(party_name, "Reserved Seats")
)
assembly_control <- party_positions %>%
group_by(assembly, bench) %>%
summarize(
party_direct_label = paste0(party_name, "Direct Seats"),
party_reserved_label = paste0(party_name, "Reserved Seats")
)
assembly_control <- party_positions %>%
group_by(assembly, bench) %>%
mutate(
party_direct_label = paste0(party_name, "Direct Seats"),
party_reserved_label = paste0(party_name, "Reserved Seats")
)
View(assembly_control)
assembly_control <- party_positions %>%
group_by(assembly, bench) %>%
mutate(
party_direct_label = paste0(party_name, " Direct Seats"),
party_reserved_label = paste0(party_name, " Reserved Seats")
)
write.csv(assembly_control, "assembly.csv")
candidate_data <- read.csv("pk_candidate_data.csv")  # load candidate data
candidate_data$election_date <- mdy(candidate_data$election_date)
#
Incumbency <- candidate_data %>%
# constituency boundaries changed in 2002 so prior data excluded
filter(election_date == "2013-05-11" | election_date == "2008-02-18" | election_date == "2002-10-10") %>%
group_by(constituency_number, candidate_party) %>%
mutate(
lagged_win = dplyr::lag(outcome, n = 1, default = NA),
lagged_party_vote = dplyr::lag(candidate_votes, n = 1, default = NA),
lagged_party_share = dplyr::lag(candidate_share, n = 1, default = NA)
)
Incumbency <- Incumbency %>% group_by(election_date, constituency_number) %>%
mutate(
winner_vote = max(candidate_votes),
runner_up = candidate_votes[candidate_rank == 2]
)
Incumbency <- Incumbency %>% mutate(
MOV_votes = ifelse(candidate_rank == 1, (candidate_votes - runner_up), (candidate_votes - winner_vote)),
MOV_pct = MOV_votes / validated_votes
)
Incumbency <- Incumbency %>% group_by(constituency_number, candidate_party) %>%
mutate(
lagged_MOV = dplyr::lag(MOV_pct, n = 1, default = NA)
)
Incumbency$outcome <- ifelse(Incumbency$outcome == "Win", 1, 0)
Incumbency$lagged_win <- ifelse(Incumbency$lagged_win == "Win", 1, 0)
# Independent candidates don't lag properly and are excluded from final plot
Incumbency <- Incumbency %>% filter(candidate_party != "Independents")
Party_Incumb_Plot <- ggplot(subset(Incumbency,
assembly == "National" &
(election_date == "2013-05-11") | (election_date == "2008-02-18")
),
aes(y= MOV_pct, x = lagged_MOV, color = province)) +
facet_wrap(~ election_date) +
geom_hline(aes(yintercept = 0, group = as.factor(election_date)), size = 1.2, color="gray80") +
geom_vline(aes(xintercept = 0, group = as.factor(election_date)), size = 1.2, color="gray80") +
geom_abline(intercept = 0, slope = 1, size = 1.2, color = "gray80") +
geom_point(alpha = .75) +
scale_color_brewer(palette = "Set1") +
scale_x_continuous(labels = scales::percent, breaks=seq(-1,1,by=0.2)) +
scale_y_continuous(labels = scales::percent, breaks=seq(-1,1,by=0.2)) +
coord_equal() +
# include a regression line
geom_smooth(method = "loess", color = "dodgerblue4",
data = subset(Incumbency, assembly == "National" &
(election_date == "2013-05-11") | (election_date == "2008-02-18")
),
mapping = aes(y = MOV_pct, x = lagged_MOV, color = province)) +
labs(x = "Margin of Victory for Candidate's Party in Same Constituency in Previous Election",
y = "Candidate Margin of Victory in Current Election",
title = "Party Incumbency Trends in Pakistan's National Assembly Elections (2002 - 2013)",
subtitle = "Points are candidates. Excludes independent candidates. Preceding elections data may in some instances be by-elections held immediately after the last general election cycle.\nCaution is advised against extending this analysis to previous or future election cycles. Please see accompanying paper for further discussion.",
caption = "Author: Colin Cookman (Twitter: @colincookman)\nFor code and data used to generate this chart see: https://github.com/colincookman/pakistan_elections\nCaveat: No guarantees are made as to underlying accuracy of this data.",
color = "Province"
) +
theme(legend.position = "bottom", panel.spacing = unit(1.5, "lines"), plot.caption = element_text(hjust = 0))
Party_Incumb_Plot
Party_Incumb_Plot <- ggplot(subset(Incumbency,
assembly == "National" &
(election_date == "2013-05-11") | (election_date == "2008-02-18")
),
aes(y= MOV_pct, x = lagged_MOV, color = province)) +
facet_wrap(~ election_date) +
geom_hline(aes(yintercept = 0, group = as.factor(election_date)), size = 1.2, color="gray80") +
geom_vline(aes(xintercept = 0, group = as.factor(election_date)), size = 1.2, color="gray80") +
geom_abline(intercept = 0, slope = 1, size = 1.2, color = "gray80") +
geom_point(alpha = .75) +
scale_color_brewer(palette = "Set1") +
scale_x_continuous(labels = scales::percent, breaks=seq(-1,1,by=0.2)) +
scale_y_continuous(labels = scales::percent, breaks=seq(-1,1,by=0.2)) +
coord_equal() +
# include a regression line
geom_smooth(method = "loess", color = "dodgerblue4",
data = subset(Incumbency, assembly == "National" &
(election_date == "2013-05-11") | (election_date == "2008-02-18")
),
mapping = aes(y = MOV_pct, x = lagged_MOV, color = province)) +
labs(x = "Margin of Victory for Candidate's Party in Same Constituency in Previous Election",
y = "Candidate Margin of Victory in Current Election",
title = "Party Incumbency Trends in Pakistan's National Assembly Elections (2002 - 2013)",
subtitle = "Points are candidates. Excludes independent candidates. \nPreceding elections data may in some instances be by-elections held immediately after the last general election cycle.\nCaution is advised against extending this analysis to previous or future election cycles. Please see accompanying paper for further discussion.",
caption = "Author: Colin Cookman (Twitter: @colincookman)\nFor code and data used to generate this chart see: https://github.com/colincookman/pakistan_elections\nCaveat: No guarantees are made as to underlying accuracy of this data.",
color = "Province"
) +
theme(legend.position = "bottom", panel.spacing = unit(1.5, "lines"), plot.caption = element_text(hjust = 0))
Party_Incumb_Plot
Party_Incumb_Plot <- ggplot(subset(Incumbency,
assembly == "National" &
(election_date == "2013-05-11") | (election_date == "2008-02-18")
),
aes(y= MOV_pct, x = lagged_MOV, shape = province)) +
facet_wrap(~ election_date) +
geom_hline(aes(yintercept = 0, group = as.factor(election_date)), size = 1.2, color="gray80") +
geom_vline(aes(xintercept = 0, group = as.factor(election_date)), size = 1.2, color="gray80") +
geom_abline(intercept = 0, slope = 1, size = 1.2, color = "gray80") +
geom_point(alpha = .75) +
scale_color_brewer(palette = "Set1") +
scale_x_continuous(labels = scales::percent, breaks=seq(-1,1,by=0.2)) +
scale_y_continuous(labels = scales::percent, breaks=seq(-1,1,by=0.2)) +
coord_equal() +
scale_shape_manual(values = c(15, 18, 17, 19, 13)) +
# include a regression line
geom_smooth(method = "loess", color = "black",
data = subset(Incumbency, assembly == "National" &
(election_date == "2013-05-11") | (election_date == "2008-02-18")
),
mapping = aes(y = MOV_pct, x = lagged_MOV, group = 1)) +
labs(x = "Margin of Victory for Candidate's Party in Same Constituency in Previous Election",
y = "Candidate Margin of Victory in Current Election",
title = "Party Incumbency Trends in Pakistan's National Assembly Elections (2002 - 2013)",
subtitle = "Points are candidates. Excludes independent candidates. \nPreceding elections data may in some instances be by-elections held immediately after the last general election cycle.\nCaution is advised against extending this analysis to previous or future election cycles. Please see accompanying paper for further discussion.",
caption = "Author: Colin Cookman (Twitter: @colincookman)\nFor code and data used to generate this chart see: https://github.com/colincookman/pakistan_elections\nCaveat: No guarantees are made as to underlying accuracy of this data.",
shape = "Province"
) +
theme(legend.position = "bottom", panel.spacing = unit(1.5, "lines"), plot.caption = element_text(hjust = 0))
Party_Incumb_Plot
Party_Incumb_Plot <- ggplot(subset(Incumbency,
assembly == "National" &
(election_date == "2013-05-11") | (election_date == "2008-02-18")
),
aes(y= MOV_pct, x = lagged_MOV, shape = province)) +
facet_wrap(~ election_date) +
geom_hline(aes(yintercept = 0, group = as.factor(election_date)), size = 1.2, color="gray80") +
geom_vline(aes(xintercept = 0, group = as.factor(election_date)), size = 1.2, color="gray80") +
geom_abline(intercept = 0, slope = 1, size = 1.2, color = "gray80") +
geom_point(alpha = .65) +
scale_color_brewer(palette = "Set1") +
scale_x_continuous(labels = scales::percent, breaks=seq(-1,1,by=0.2)) +
scale_y_continuous(labels = scales::percent, breaks=seq(-1,1,by=0.2)) +
coord_equal() +
scale_shape_manual(values = c(15, 18, 17, 19, 13)) +
# include a regression line
geom_smooth(method = "loess", color = "black",
data = subset(Incumbency, assembly == "National" &
(election_date == "2013-05-11") | (election_date == "2008-02-18")
),
mapping = aes(y = MOV_pct, x = lagged_MOV, group = 1)) +
labs(x = "Margin of Victory for Candidate's Party in Same Constituency in Previous Election",
y = "Candidate Margin of Victory in Current Election",
title = "Party Incumbency Trends in Pakistan's National Assembly Elections (2002 - 2013)",
subtitle = "Points are candidates. Excludes independent candidates. \nPreceding elections data may in some instances be by-elections held immediately after the last general election cycle.\nCaution is advised against extending this analysis to previous or future election cycles. Please see accompanying paper for further discussion.",
caption = "Author: Colin Cookman (Twitter: @colincookman)\nFor code and data used to generate this chart see: https://github.com/colincookman/pakistan_elections\nCaveat: No guarantees are made as to underlying accuracy of this data.",
shape = "Province"
) +
theme(legend.position = "bottom", panel.spacing = unit(1.5, "lines"), plot.caption = element_text(hjust = 0))
Party_Incumb_Plot
View(assembly_control)
party_positions <- read.csv("https://github.com/colincookman/pakistan_elections/end_of_term_party_positions.csv")
party_positions <- read.csv("end_of_term_party_positions.csv")
party_positions$type = NA
View(party_positions)
for(i in c(1:59)) {
direct <- party_positions[, c(1:8,9)]
direct <- direct %>% mutate(seat_type == "direct")
reserved <- party_positions[, c(1:8,10)]
reserved <- reserved %>% mutate(seat_type == "reserved")
if(i == 1) {
out <- direct
rbind(out, reserved)
}else{
out <- rbind(out, direct)
out <- rbind(out, reserved)
}
}
for(i in c(1:59)) {
direct <- party_positions[, c(1:8,9)]
direct <- direct %>% mutate(seat_type = "direct")
reserved <- party_positions[, c(1:8,10)]
reserved <- reserved %>% mutate(seat_type = "reserved")
if(i == 1) {
out <- direct
rbind(out, reserved)
}else{
out <- rbind(out, direct)
out <- rbind(out, reserved)
}
}
for(i in c(1:59)) {
direct <- party_positions[, c(1:8,9)]
#  direct <- direct %>% mutate(seat_type = "direct")
reserved <- party_positions[, c(1:8,10)]
#  reserved <- reserved %>% mutate(seat_type = "reserved")
if(i == 1) {
out <- direct
rbind(out, reserved)
}else{
out <- rbind(out, direct)
out <- rbind(out, reserved)
}
}
for(i in c(1:59)) {
direct <- party_positions[, c(1:8,9)]
names(direct) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
direct <- direct %>% mutate(seat_type = "direct")
reserved <- party_positions[, c(1:8,10)]
names(reserved) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
reserved <- reserved %>% mutate(seat_type = "reserved")
if(i == 1) {
out <- direct
rbind(out, reserved)
}else{
out <- rbind(out, direct)
out <- rbind(out, reserved)
}
}
View(out)
reorganized <- party_positions %>% gather(
direct_seats, reserved_seats, key = party_name, value = "seats"
)
View(reserved)
for(i in c(1:59)) {
direct <- party_positions[, c(1:8,9)]
names(direct) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
direct <- direct %>% mutate(seat_type = "direct")
if(i == 1) {
out <- direct
}else{
out <- rbind(out, direct)
}
}
for(i in c(1:59)) {
direct <- party_positions[, c(1:8,9)]
names(direct) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
direct <- direct %>% mutate(seat_type = "direct")
if(i == 1) {
out_direct <- direct
}else{
out_direct <- rbind(out, direct)
}
}
for(i in c(1:59)) {
reserved <- party_positions[, c(1:8,10)]
names(reserved) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
reserved <- reserved %>% mutate(seat_type = "reserved")
if(i == 1) {
out_reserved <- reserved
}else{
out_reserved <- rbind(out, reserved)
}
}
View(out_reserved)
for(i in c(1:5)) {
reserved <- party_positions[, c(1:8,10)]
names(reserved) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
reserved <- reserved %>% mutate(seat_type = "reserved")
if(i == 1) {
out_reserved <- reserved
}else{
out_reserved <- rbind(out, reserved)
}
}
View(out_reserved)
for(i in c(1:59)) {
direct <- party_positions[, c(1:8,9)]
names(direct) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
direct <- direct %>% mutate(seat_type = "direct")
if(i == 1) {
out_direct <- direct
}else{
out_direct <- rbind(out, direct)
}
}
for(i in c(1:59)) {
reserved <- party_positions[, c(1:8,10)]
names(reserved) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
reserved <- reserved %>% mutate(seat_type = "reserved")
if(i == 1) {
out_reserved <- reserved
}else{
out_reserved <- rbind(out, reserved)
}
}
uniques <- unique(out_reserved)
View(uniques)
for(i in c(1:59)) {
direct <- party_positions[, c(1:8,9)]
names(direct) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
direct <- direct %>% mutate(seat_type = "direct")
if(i == 1) {
out_direct <- direct
}else{
out_direct <- rbind(out_direct, direct)
}
}
party_positions <- read.csv("end_of_term_party_positions.csv")
for(i in c(1:59)) {
direct <- party_positions[, c(1:8,9)]
names(direct) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
direct <- direct %>% mutate(seat_type = "direct")
if(i == 1) {
out_direct <- direct
}else{
out_direct <- rbind(out_direct, direct)
}
}
for(i in c(1:59)) {
reserved <- party_positions[, c(1:8,10)]
names(reserved) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
reserved <- reserved %>% mutate(seat_type = "reserved")
if(i == 1) {
out_reserved <- reserved
}else{
out_reserved <- rbind(out_reserved, reserved)
}
}
uniques <- unique(out_reserved)
View(reserved)
View(direct)
for {
reserved <- party_positions[, c(1:8,10)]
names(reserved) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
reserved <- reserved %>% mutate(seat_type = "reserved")
}
reserved <- party_positions[, c(1:8,10)]
View(reserved)
party_positions <- read.csv("end_of_term_party_positions.csv")
direct <- party_positions[, c(1:8,9)]
names(direct) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
direct <- direct %>% mutate(seat_type = "direct")
reserved <- party_positions[, c(1:8,10)]
names(reserved) <- c("observation_date", "assembly", "total_seats",
"seats_to_control", "total_direct", "total_reserved", "party_name", "bench",
"seats")
reserved <- reserved %>% mutate(seat_type = "reserved")
View(direct)
View(party_positions)
combined <- full_join(direct, reserved)
View(combined)
combined <- combined %>%
dplyr::select([1:8],[10],[9])
combined <- combined %>%
dplyr::select("observation_date", "assembly", "total_seats", "seats_to_control", "total_direct", "total_reserved",
"party_name", "bench", "seat_type", "seats")
View(combined)
combined <- arrange(combined, assembly, party_name, seat_type)
View(combined)
combined <- arrange(combined, assembly, bench, party_name, seat_type)
View(combined)
write.csv(combined, "end_of_term_party_positions.csv")
party_positions <- read.csv("end_of_term_party_positions.csv")
View(party_positions)
assembly_target = "Balochistan"
ggplot(data = subset(party_positions, assembly == assembly_target),
aes(x = bench, y = seats, fill = party_name) +
geom_bar() + coord_flip()
)
ggplot(data = subset(party_positions, assembly == assembly_target),
aes(x = bench, y = seats, fill = as.factor(party_name)) +
geom_bar() + coord_flip()
)
ggplot(data = subset(party_positions, assembly == assembly_target),
aes(x = as.factor(bench), y = seats, fill = as.factor(party_name)) +
geom_bar() + coord_flip()
)
ggplot(data = subset(party_positions, assembly == assembly_target),
aes(x = as.factor(province), y = seats, fill = as.factor(party_name)) +
geom_bar() + coord_flip()
)
ggplot(data = party_positions,
aes(x = factor(province), y = seats, fill = factor(party_name)) +
geom_bar() + coord_flip()
ggplot(data = party_positions,
aes(x = factor(province), y = seats, fill = factor(party_name))) +
geom_bar() + coord_flip()
ggplot(data = party_positions,
aes(x = factor(province), y = seats, fill = factor(bench))) +
geom_bar() + coord_flip()
ggplot(data = party_positions,
aes(x = factor(assembly), y = seats, fill = factor(bench))) +
geom_bar() + coord_flip()
ggplot(data = party_positions,
aes(x = seats, y = factor(assembly), fill = factor(bench))) +
geom_bar() + coord_flip()
ggplot(data = party_positions,
aes(x = seats, y = factor(party_names)) +
geom_bar() + coord_flip()
ggplot(data = party_positions,
aes(x = seats, y = factor(party_names))
) +
geom_bar() + coord_flip()
ggplot(data = party_positions,
aes(x = seats, y = factor(party_names))
) +
geom_bar(na.rm = TRUE) + coord_flip()
ggplot(data = party_positions,
aes(x = seats, y = factor(party_name))
) +
geom_bar(na.rm = TRUE) + coord_flip()
ggplot(data = subset(party_positions, !is.na(seats)),
aes(x = seats, y = factor(party_name))
) +
geom_bar(na.rm = TRUE) + coord_flip()
